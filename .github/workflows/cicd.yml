name: Docker Images CI/CD

# Trigger on push to main branch (adjust as needed)
on:
  push:
    branches: [ main ]
  # You can add workflow_dispatch for manual trigger if needed:
  # workflow_dispatch:

jobs:
  # Job 1: Build and push the base Lambda image
  base:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # e.g., "us-east-1" or your AWS region

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push base image (Lambda runtime base)
        env:
          # Use the ECR registry URL output by the login step
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_REPO: lambda        # ECR repository name for base image
          IMAGE_TAG: ${{ github.sha }}   # use commit SHA for a unique tag
        run: |
          echo "Building base image..."
          docker build -t $ECR_REGISTRY/$IMAGE_REPO:$IMAGE_TAG \
                       -t $ECR_REGISTRY/$IMAGE_REPO:latest \
                       -f Dockerfile.lambda .
          echo "Pushing base image to ECR..."
          docker push $ECR_REGISTRY/$IMAGE_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$IMAGE_REPO:latest

  # Job 2: Build/push App1 image and deploy to Lambda
  app1:
    runs-on: ubuntu-latest
    needs: base    # Wait for base image to be built
    env:
      FUNCTION_NAME: MyApp1LambdaFunction  # replace with your actual Lambda function name for App1
      IMAGE_REPO: app1                    # ECR repository name for App1 image
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push App1 image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_REPO: ${{ env.IMAGE_REPO }}
        run: |
          echo "Building App1 image..."
          docker build -t $ECR_REGISTRY/$IMAGE_REPO:$IMAGE_TAG \
                       -t $ECR_REGISTRY/$IMAGE_REPO:latest \
                       -f app1/Dockerfile \
                       --build-arg ECR_REGISTRY=$ECR_REGISTRY \
                       --build-arg BASE_IMAGE_TAG=$IMAGE_TAG \
                       app1/
          echo "Pushing App1 image to ECR..."
          docker push $ECR_REGISTRY/$IMAGE_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$IMAGE_REPO:latest

      - name: Update Lambda function (App1)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_REPO: ${{ env.IMAGE_REPO }}
          FUNCTION_NAME: ${{ env.FUNCTION_NAME }}
        run: |
          echo "Deploying new image to Lambda: $FUNCTION_NAME"
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --image-uri "$ECR_REGISTRY/$IMAGE_REPO:$IMAGE_TAG"
          echo "Lambda function $FUNCTION_NAME updated to image $IMAGE_TAG"

  # Job 3: Build/push App2 image and deploy to Lambda
  app2:
    runs-on: ubuntu-latest
    needs: base
    env:
      FUNCTION_NAME: MyApp2LambdaFunction   # replace with actual Lambda name for App2
      IMAGE_REPO: app2                     # ECR repo name for App2 image
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push App2 image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_REPO: ${{ env.IMAGE_REPO }}
        run: |
          echo "Building App2 image..."
          docker build -t $ECR_REGISTRY/$IMAGE_REPO:$IMAGE_TAG \
                       -t $ECR_REGISTRY/$IMAGE_REPO:latest \
                       -f app2/Dockerfile \
                       --build-arg ECR_REGISTRY=$ECR_REGISTRY \
                       --build-arg BASE_IMAGE_TAG=$IMAGE_TAG \
                       app2/
          echo "Pushing App2 image to ECR..."
          docker push $ECR_REGISTRY/$IMAGE_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$IMAGE_REPO:latest

      - name: Update Lambda function (App2)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_REPO: ${{ env.IMAGE_REPO }}
          FUNCTION_NAME: ${{ env.FUNCTION_NAME }}
        run: |
          echo "Deploying new image to Lambda: $FUNCTION_NAME"
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --image-uri "$ECR_REGISTRY/$IMAGE_REPO:$IMAGE_TAG"
          echo "Lambda function $FUNCTION_NAME updated to image $IMAGE_TAG"